import yaml
import os

workflow_content = {
    'name': 'Python Application Workflow',
    'on': {
        'push': {'branches': ['main']},
        'pull_request': {'branches': ['main']}
    },
    'env': {
        'ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION': 'true'
    },
    'jobs': {
        'build': {
            'runs-on': 'ubuntu-latest',
            'steps': [
                {
                    'uses': 'actions/checkout@v2'
                },
                {
                    'name': 'Set up Python',
                    'uses': 'actions/setup-python@v2',
                    'with': {
                        'python-version': '3.9'
                    }
                },
                {
                    'name': 'Install dependencies',
                    'run': '''
                        python -m pip install --upgrade pip
                        pip install flake8 pytest
                        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
                    '''
                },
                {
                    'name': 'Lint with flake8',
                    'run': '''
                        # stop the build if there are Python syntax errors or undefined names
                        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
                        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
                    '''
                },
                {
                    'name': 'Run Python tests',
                    'run': 'pytest'
                },
                {
                    'name': 'Set up Node.js 16',
                    'uses': 'actions/setup-node@v2',
                    'with': {
                        'node-version': '16'
                    }
                },
                {
                    'name': 'Run JavaScript-based linter',
                    'run': '''
                        npm install eslint
                        npx eslint .
                    '''
                }
            ]
        }
    }
}

# Ensure the .github/workflows directory exists
os.makedirs('.github/workflows', exist_ok=True)

# Write the workflow file
with open('.github/workflows/python-app-workflow.yml', 'w') as file:
    yaml.dump(workflow_content, file, sort_keys=False)

print('Python application workflow file has been created successfully.')

# You can add this script to your Python project and run it to generate the workflow file
# You might want to add it to your project's setup or build scripts
